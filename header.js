let name = "Catala"

let tokens = {
  SCOPE: "scope",
  CONSEQUENCE: "consequence",
  DATA: "data",
  DEPENDS: "depends on",
  DECLARATION: "declaration",
  CONTEXT: "context",
  DECREASING: "decreasing",
  INCREASING: "increasing",
  OF: "of",
  COLLECTION: "collection",
  ENUM: "enumeration",
  INTEGER: "integer",
  MONEY: "money",
  TEXT: "text",
  DECIMAL: "decimal",
  DATE: "date",
  DURATION: "duration",
  BOOLEAN: "boolean",
  SUM: "sum",
  FILLED: "fulfilled",
  DEFINITION: "definition",
  STATE: "state",
  LABEL: "label",
  EXCEPTION: "exception",
  DEFINED_AS: "equals",
  MATCH: "match",
  WILDCARD: "anything",
  WITH: "with pattern",
  UNDER_CONDITION: "under condition",
  IF: "if",
  THEN: "then",
  ELSE: "else",
  CONDITION: "condition",
  CONTENT: "content",
  STRUCT: "structure",
  ASSERTION: "assertion",
  VARIES: "varies",
  WITH_V: "with",
  FOR: "for",
  ALL: "all",
  WE_HAVE: "we have",
  FIXED: "fixed",
  BY: "by",
  RULE: "rule",
  EXISTS: "exists",
  IN: "in",
  SUCH: "such",
  THAT: "that",
  AND: "and",
  OR: "or",
  XOR: "xor",
  NOT: "not",
  MAXIMUM: "maximum",
  MINIMUM: "minimum",
  FILTER: "filter",
  MAP: "map",
  INIT: "initial",
  CARDINAL: "number",
  YEAR: "year",
  MONTH: "month",
  DAY: "day",
  TRUE: "true",
  FALSE: "false",
  INPUT: "input",
  OUTPUT: "output",
  INTERNAL: "internal",
  MC_DECIMAL_SEPARATOR: '.',
  RoundMoney: "round_money",
  RoundDecimal: "round_decimal",
  IntToDec: "integer_to_decimal",
  GetDay: "get_day",
  GetMonth: "get_month",
  GetYear: "get_year",
  ALT: '--',
  AT_PAGE: 'todo',
  BEGIN_CODE: '```catala',
  BEGIN_DIRECTIVE: '>',
  BEGIN_METADATA: '```catala-metadata',
  COLON: ':',
  CONSTRUCTOR: /[A-Z][A-Za-z0-9_']*/,
  DECIMAL_LITERAL: /[0-9]+.[0-9]*/,
  DIRECTIVE_ARG: /\S+/,
  DIV: '/',
  DIVDEC: '/.',
  DIVDURATION: '/^',
  DIVMONEY: '/$',
  DOT: '.',
  END_CODE: '```',
  END_DIRECTIVE: '\n',
  EOF: 'thisIsNotEOF',
  EQUAL: '=',
  GREATER: '>',
  GREATER_DATE: '>@',
  GREATER_DEC: '>.',
  GREATER_DURATION: '>^',
  GREATER_EQUAL: '>=',
  GREATER_EQUAL_DATE: '>=@',
  GREATER_EQUAL_DEC: '>=.',
  GREATER_EQUAL_DURATION: '>=^',
  GREATER_EQUAL_MONEY: '>=$',
  GREATER_MONEY: '>$',
  IDENT: /[a-z][a-zA-Z0-9_']*/,
  INT_LITERAL: /[0-9]+/,
  LAW_HEADING: /#+\s*\S+/,
  LAW_INCLUDE: 'Include',
  LAW_TEXT: /\S+/,
  LBRACKET: '{',
  LESSER: '<',
  LESSER_DATE: '<@',
  LESSER_DEC: '<.',
  LESSER_DURATION: '<^',
  LESSER_EQUAL: '<=',
  LESSER_EQUAL_DATE: '<=@',
  LESSER_EQUAL_DEC: '<=.',
  LESSER_EQUAL_DURATION: '<=^',
  LESSER_EQUAL_MONEY: '<=$',
  LESSER_MONEY: '<$',
  LPAREN: '(',
  LSQUARE: '[',
  MINUS: '-',
  MINUSDATE: '-@',
  MINUSDEC: '-.',
  MINUSDURATION: '-^',
  MINUSMONEY: '-$',
  MONEY_AMOUNT: /\$[0-9]([0-9,]*[0-9])?(\.[0-9]{0,2})?/,
  MULT: '*',
  MULTDEC: '*.',
  MULTMONEY: '*$',
  NOT_EQUAL: '!=',
  PERCENT: '%',
  PLUS: '+',
  PLUSDATE: '+@',
  PLUSDEC: '+.',
  PLUSDURATION: '+^',
  PLUSMONEY: '+$',
  PLUSPLUS: '++',
  RBRACKET: '}',
  RPAREN: ')',
  RSQUARE: ']',
  SEMICOLON: ';',
  VERTICAL: '|'
}

let inline = $ => [
  // $.law_text,
]

let word = $ => $.IDENT
